import requests

# 📌 상수
BASE_URL = "https://new.land.naver.com"
API_ENDPOINT = "/api/articles/complex/26"
FULL_URL = f"{BASE_URL}{API_ENDPOINT}"

AUTH_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IlJFQUxFU1RBVEUiLCJpYXQiOjE3NDc0NTI2MDcsImV4cCI6MTc0NzQ2MzQwN30.vZ8tTsYiOerx4tFQJc6KstDxVzWQQ_aUUkqw_wzgEuw"

COOKIES = {
    'NNB': 'PLA2MPHK3M4WO',
    'ASID': '3d4e964a000001935135093b00000044',
    'NFS': '2',
    'BNB_FINANCE_HOME_TOOLTIP_MYASSET': 'true',
    'tooltipDisplayed': 'true',
    'nstore_session': 'U9FzAo+xakOBgC/mJPYhzvKB',
    'nstore_pagesession': 'i2OWjdqlcjFugssn/18-063810',
    '_ga': 'GA1.1.953891876.1735000176',
    'NaverSuggestUse': 'use%26unuse',
    '_ga_3X9JZ731KT': 'GS1.1.1742526301.2.1.1742526317.0.0.0',
    'NAC': 'gRMKBkw9DTQw',
    '_fwb': '211xRpLJtPEtzAcgwGJDKx0.1747392465093',
    'NACT': '1',
    'nhn.realestate.article.rlet_type_cd': 'A01',
    'nhn.realestate.article.trade_type_cd': '""',
    'nhn.realestate.article.ipaddress_city': '1100000000',
    '_fwb': '19EOYjkF3afYNeYCx4tg0H.1747445090813',
    'landHomeFlashUseYn': 'Y',
    'realestate.beta.lastclick.cortar': '1150000000',
    'page_uid': 'juQDBwqosTCsscvpQYNssssstU8-314579',
    'SRT30': '1747452601',
    'SRT5': '1747452601',
    'REALESTATE': 'Sat%20May%2017%202025%2012%3A30%3A07%20GMT%2B0900%20(Korean%20Standard%20Time)',
    'BUC': 'DEjhoF1H0aI2Qbqjlb5u8hBs_af9YKpydmBafPvNbQg=',
}

HEADERS = {
    'accept': '*/*',
    'accept-language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
    'authorization': f'Bearer {AUTH_TOKEN}',
    'priority': 'u=1, i',
    'referer': f'{BASE_URL}/complexes/26?ms=37.57721,126.8107755,17&a=APT:PRE:ABYG:JGC&e=RETAIL',
    'sec-ch-ua': '"Chromium";v="136", "Google Chrome";v="136", "Not.A/Brand";v="99"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
}

# 📌 기본 파라미터
DEFAULT_PARAMS = {
    'realEstateType': 'APT:PRE:ABYG:JGC',
    'tradeType': '',
    'priceMin': 0,
    'priceMax': 9999999999,
    'areaMin': 0,
    'areaMax': 9999999999,
    'complexNo': 26,
    'type': 'list',
    'order': 'rank'
}

# 📌 데이터 필드
TARGET_FIELDS = [
    "confirmDate",
    "articleNo",
    "articleName",
    "area",
    "building",
    "direction",
    "floor",
    "tradeType",
    "price",
    "rentPrice",
    "articleFeatureDesc",
    "realtor",
    "tags",
    "latitude",
    "longitude",
    "status"
]

# 🌐 모든 페이지 불러오기
all_articles = []
page = 1

try:
    while True:
        # 페이지 설정
        params = DEFAULT_PARAMS.copy()
        params['page'] = page

        # API 요청
        response = requests.get(
            FULL_URL,
            headers=HEADERS,
            cookies=COOKIES,
            params=params,
        )
        response.raise_for_status()
        data = response.json()

        # 📋 데이터 추출
        articles = data.get("articleList", [])
        if not articles:
            print("✅ 모든 페이지 불러오기 완료!")
            break

        all_articles.extend(articles)
        print(f"🔄 {page} 페이지에서 {len(articles)}개의 매물 데이터를 불러왔습니다.")

        # 다음 페이지로 이동
        page += 1

except requests.RequestException as e:
    print(f"❌ 요청 실패: {e}")

# 📝 총 매물 개수 출력
print(f"\n🗂️ 총 {len(all_articles)}개의 매물 데이터를 불러왔습니다.\n")

# 📋 결과 출력
for idx, article in enumerate(all_articles, start=1):
    print(f"📌 Article {idx}")
    for key in TARGET_FIELDS:
        print(f"{key}: {article.get(key)}")
    print("-" * 40)
